# Copyright (C) 2018 Michel Müller, Tokyo Institute of Technology

# This file is part of Hybrid Fortran.

# Hybrid Fortran is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Hybrid Fortran is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with Hybrid Fortran. If not, see <http://www.gnu.org/licenses/>.

#***************************************************************************#
#  Makefile that gets copied into the individual build directories.         #
#  Usually nothing needs to be changed here.                                #
#                                                                           #
#  Date             2013/02/01                                              #
#  Author           Michel Müller (TITECH)                                  #
#***************************************************************************#

include ./MakesettingsGeneral
HYBRID_LIBRARY_FILENAME_POSTFIX?=pp
include ./Makesettings

SHELL=/bin/bash

ifdef VERBOSE
DEBUG_OUTPUT=&1
else
DEBUG_OUTPUT=/dev/null
endif

define blueecho
@[ -t 1 ] && tput setaf 4
@echo $1
@[ -t 1 ] && tput sgr0
endef

define debugecho
@[ -t 1 ] && tput setaf 4
@echo $1 >${DEBUG_OUTPUT}
@[ -t 1 ] && tput sgr0
endef

# WARNING: The following settings need to be repeated in MakefileCommon
PFLAGS_POST= ${PFLAGS}
ifdef GPU_BUILD
PFLAGS_POST= -DGPU ${PFLAGS}
endif

SRC_PP=$(wildcard ./*.P90)
SRC_FORT=$(wildcard ./*.f90)
SRC_FORT_PPSTD=$(wildcard ./*.F90)
SRC_FORT_FIXED=$(wildcard ./*.f)
SRC_PP_FIXED=$(wildcard ./*.F)
SRC_C=$(wildcard ./*.c)
SRC_CU=$(wildcard ./*.cu)

EXECUTABLES_POST=$(subst ",,${EXECUTABLES})
EXECUTABLES_OUT=$(patsubst %,%.out,${EXECUTABLES_POST})
EXECUTABLES_O=$(patsubst %,%.o,${EXECUTABLES_POST})

OBJ_PP=$(SRC_PP:.P90=.o)
OBJ_FORT90=$(filter-out $(OBJ_PP),$(SRC_FORT:.f90=.o))
OBJ_FORT90_PPSTD=$(filter-out $(OBJ_PP),$(SRC_FORT_PPSTD:.F90=.o))
OBJ_FORT_FIXED=$(SRC_FORT_FIXED:.f=.o)
OBJ_PP_FIXED=$(SRC_PP_FIXED:.F=.o)
OBJ_C=$(SRC_C:.c=.o)
OBJ_CU=$(SRC_CU:.cu=.o)
OBJ_PRE1=${OBJ_PP} ${OBJ_FORT90} ${OBJ_FORT_FIXED} ${OBJ_PP_FIXED} ${OBJ_C} ${OBJ_CU} ${OBJ_FORT90_PPSTD}
OBJ_PRE2=$(patsubst ./%,%,${OBJ_PRE1})
OBJ=$(filter-out $(EXECUTABLES_O),$(OBJ_PRE2))
$(warning $(OBJ))

USER_LIB=lib${HYBRID_LIBRARY_FILENAME_POSTFIX}.a
LIBRARY_OBJECTS?="${OBJ}"
LIBRARY_OBJECTS_POST=$(subst ",,${LIBRARY_OBJECTS})

VPATH=$OBJDIR

.SUFFIXES: .out .o .il .F90 .f90 .F .f .P90 .c .cu .inc

.PRECIOUS: %.f90

all: ${EXECUTABLES_OUT} ${USER_LIB}

%.out: %.o
	@echo .........linking $< in $(CURDIR)
	$(LD) -o ../$@ $< $(LDFLAGS) -L./ >${DEBUG_OUTPUT}

${USER_LIB}: $(LIBRARY_OBJECTS_POST)
	@echo .........building user library ${USER_LIB} from $(LIBRARY_OBJECTS_POST)
	$(AR) $(ARFLAGS) $@ $(LIBRARY_OBJECTS_POST)

# we first preprocess with pgcc so we get concatenation / stringification.
# since this only works with files that don't have the F90 prefix, we use P90 here.
# first we preprocess such that everything gets included, then we replace ` to \n in order to get
# multiline macros working, then we remove all multiline c-style comments with sed.
# finally, # comment lines are removed since these lines inserted by gcc -E will confuse Fortran debuggers.
.DELETE_ON_ERROR:
%.f90: %.P90
	$(call blueecho,"..........preprocessing $< in $(CURDIR)")
	set -o pipefail; < $< sed "s/\/\//¢/g" | gcc -E -w ${PFLAGS_POST} - | tr "\`" '\n' | sed "s/¢/\/\//g" | sed '/^#/ d' > $@

%.o: %.F90
	$(call blueecho,"..........compiling $< in $(CURDIR)")
	$(FC) $(FFLAGS) $(PFLAGS_POST) -c $< -o $@

%.o: %.f90
	$(call blueecho,"..........compiling $< in $(CURDIR)")
	$(FC) $(FFLAGS) $(PFLAGS_POST) -c $< -o $@

%.o: %.F
	$(call blueecho,"..........compiling $< in $(CURDIR)")
	$(FC) $(FFLAGS) $(PFLAGS_POST) -c $< -o $@

%.o: %.f
	$(call blueecho,"..........compiling $< in $(CURDIR)")
	$(FC) $(FFLAGS) $(PFLAGS_POST) -c $< -o $@

%.o: %.c
	$(call blueecho,"..........compiling $< in $(CURDIR)")
	$(CC) $(CFLAGS) $(PFLAGS_POST) -c $< -o $@

%.o: %.cu
	$(call blueecho,"..........compiling $< in $(CURDIR)")
	$(CUDAC) $(CUDAFLAGS) $(PFLAGS_POST) -c $< -o $@

%.inc:

helper_functions.o: storage_order.F90
helper_functions_gpu.o: storage_order.F90
time_profiling.o: helper_functions.o

ifdef AUTO_DEPENDENCY_GENERATOR_OUTPUT_PATH
include ../${AUTO_DEPENDENCY_GENERATOR_OUTPUT_PATH}
endif
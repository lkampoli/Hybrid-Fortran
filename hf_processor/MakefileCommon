# Copyright (C) 2018 Michel Müller, Tokyo Institute of Technology

# This file is part of Hybrid Fortran.

# Hybrid Fortran is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Hybrid Fortran is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with Hybrid Fortran. If not, see <http://www.gnu.org/licenses/>.

#***************************************************************************#
#  Makefile for Hybrid Fortran Build Interface                              #
#                                                                           #
#  Date             2013/03/04                                              #
#  Author           Michel Müller (TITECH)                                  #
#                                                                           #
#                                                                           #
# USUALLY NOTHING HERE SHOULD BE CHANGED!                                   #
# see the following files for changing build settings:                      #
#    * ./config/MakesettingsGeneral (directory settings,                    #
#                                      compilation exceptions )             #
#    * ./config/MakesettingsCPU (compiler settings CPU)                     #
#    * ./config/MakesettingsGPU (compiler settings GPU)                     #
#    * ./config/Makefile (source dependencies)                              #
#                                                                           #
#***************************************************************************#

CONFIGDIR=./config/
HF_PYTHON_DIR=${HF_DIR}/hf/

include ${CONFIGDIR}MakesettingsGeneral

SHELL=/bin/bash

ifeq ($(DEBUG_MODE),true)
DEBUG=1
endif

# WARNING: The following settings need to be repeated in MakefileForCompilationCommon
PFLAGS=
ifdef GPU_BUILD
PFLAGS= -DGPU
endif

#############################################################################
# Python settings                                                           #
#############################################################################
# PYTHON_ARGS_GENERAL="-m cProfile"
# PYTHON_ARGS_RAW_CG="-o "raw_cg.cprof"
# PYTHON_ARGS_CPU_CG="-o "cg_cpu.cprof"
PYTHON_ARGS_GENERAL=
PYTHON_ARGS_RAW_CG=
PYTHON_ARGS_CPU_CG=

#############################################################################
# Build Modes                                                               #
#############################################################################
IMPLEMENTATION_MODE_SPECIFIER=
ifdef EMULATED
#---------------------------------------------------------------------------#
# Emulated Mode settings.                                                   #
#---------------------------------------------------------------------------#
IMPLEMENTATION_MODE_SPECIFIER=emulation
BUILD_ARGS_PRE="EMULATED=1"
#---------------------------------------------------------------------------#
else
ifdef DEBUG
#---------------------------------------------------------------------------#
# Debug Mode settings.                                                      #
#---------------------------------------------------------------------------#
IMPLEMENTATION_MODE_SPECIFIER=debug
BUILD_ARGS_PRE="DEBUG=1"
#---------------------------------------------------------------------------#
else
#---------------------------------------------------------------------------#
# Production Mode settings.                                                 #
#---------------------------------------------------------------------------#
IMPLEMENTATION_MODE_SPECIFIER=production
BUILD_ARGS_PRE=
#---------------------------------------------------------------------------#
endif
endif

#############################################################################
# Determine whether tests should be performed with build                    #
#############################################################################
ifeq ($(TEST_WITH_EVERY_BUILD),true)
ADDITIONAL_BUILD_TARGETS_CPU=tests_cpu
ADDITIONAL_BUILD_TARGETS_GPU=tests_gpu
else
ADDITIONAL_BUILD_TARGETS_CPU=
ADDITIONAL_BUILD_TARGETS_GPU=
endif
#############################################################################

#############################################################################
# Determine sources and directories                                         #
#############################################################################
BASEDIR_POST=$(patsubst %\,%,$(BASEDIR))
DIR_CPU=${BASEDIR_POST}/cpu/
DIR_GPU=${BASEDIR_POST}/gpu/
CG_DIR=${BASEDIR_POST}/callgraphs/
CPU_CALLGRAPH_FILE=CG_CPU.xml
GPU_CALLGRAPH_FILE=CG_GPU.xml
SRC_DIR_CPU=${DIR_CPU}${SRC_DIR_COMMON}/
SRC_DIR_GPU=${DIR_GPU}${SRC_DIR_COMMON}/
SRC_DIR_HFPP=$(shell pwd)/${BASEDIR_POST}/hf_preprocessed/

SRC_F90_PRE='$(shell find ${SRC_DIR_COMMON} -type f -name '*.f90' -o -name '*.f' -o -name '*.inc')'
SRC_F90=$(shell python ${HF_PYTHON_DIR}filterExceptions.py --paths ${SRC_F90_PRE} --exceptions ${EXCEPTIONS})
SRC_F90PP_PRE='$(shell find ${SRC_DIR_COMMON} -type f -name '*.F90' -o -name '*.F')'
SRC_F90PP=$(shell python ${HF_PYTHON_DIR}filterExceptions.py --paths ${SRC_F90PP_PRE} --exceptions ${EXCEPTIONS})
SRC_C_PRE='$(shell find ${SRC_DIR_COMMON} -type f -name '*.c' -o -name '*.cu')'
SRC_C=$(shell python ${HF_PYTHON_DIR}filterExceptions.py --paths ${SRC_C_PRE} --exceptions ${EXCEPTIONS})

SRC_LIB_FORT=$(shell find ${LIBDIR} -type f -name '*.f90')
SRC_LIB_FORT_PP=$(shell find ${LIBDIR} -type f -name '*.F90')
SRC_LIB_H90=$(shell find ${LIBDIR} -type f -name '*.h90')
SRC_LIB_H90_WITH_PP=$(shell find ${LIBDIR} -type f -name '*.H90')

SRC_FORT=${SRC_F90} ${SRC_LIB_FORT} ${SRC_LIB_FORT_PP}
SRC_TGT_FORT_PRE='$(SRC_FORT:.F90=.P90)'
SRC_TGT_FORT=$(shell python ${HF_PYTHON_DIR}filterExceptions.py --paths ${SRC_TGT_FORT_PRE} ${SRC_F90PP} --exceptions 'storage_order time_profiling') storage_order.F90 time_profiling.F90

SRC_FORT_CPU=$(addprefix $(SRC_DIR_CPU),$(notdir ${SRC_TGT_FORT}))
SRC_FORT_GPU=$(addprefix $(SRC_DIR_GPU),$(notdir ${SRC_TGT_FORT}))
SRC_C_CPU=$(addprefix $(SRC_DIR_CPU),$(notdir ${SRC_C}))
SRC_C_GPU=$(addprefix $(SRC_DIR_GPU),$(notdir ${SRC_C}))

SRC_H90_WITHOUT_PP_PRE='$(shell find ${SRC_DIR_COMMON} -type f -name '*.h90')'
SRC_H90_WITHOUT_PP=$(shell python ${HF_PYTHON_DIR}filterExceptions.py --paths ${SRC_H90_WITHOUT_PP_PRE} --exceptions ${EXCEPTIONS})
SRC_H90_WITH_PP_PRE='$(shell find ${SRC_DIR_COMMON} -type f -name '*.H90')'
SRC_H90_WITH_PP=$(shell python ${HF_PYTHON_DIR}filterExceptions.py --paths ${SRC_H90_WITH_PP_PRE} --exceptions ${EXCEPTIONS})
SRC_H90_ALL=${SRC_H90_WITHOUT_PP} ${SRC_H90_WITH_PP} ${SRC_LIB_H90} ${SRC_LIB_H90_WITH_PP}
SRC_H90TGT_HFPP_PRE=$(addprefix $(SRC_DIR_HFPP),$(notdir $(SRC_H90_ALL)))
SRC_H90TGT_HFPP=$(SRC_H90TGT_HFPP_PRE:.H90=.h90)
SRC_H90TGT_CPU_PRE=$(addprefix $(SRC_DIR_CPU),$(notdir $(SRC_H90TGT_HFPP)))
SRC_H90TGT_CPU=$(SRC_H90TGT_CPU_PRE:.h90=.P90)
SRC_H90TGT_CPU_TEMP=$(addsuffix .temp,$(SRC_H90TGT_CPU))
SRC_H90TGT_GPU_PRE=$(addprefix $(SRC_DIR_GPU),$(notdir $(SRC_H90TGT_HFPP)))
SRC_H90TGT_GPU=$(SRC_H90TGT_GPU_PRE:.h90=.P90)
SRC_H90TGT_GPU_TEMP=$(addsuffix .temp,$(SRC_H90TGT_GPU))

FRAMEWORK_DIRS_CPU=$(addprefix $(SRC_DIR_CPU),$(FRAMEWORK_DIRS))
FRAMEWORK_DIRS_GPU=$(addprefix $(SRC_DIR_GPU),$(FRAMEWORK_DIRS))

SRC_ALL_CPU=${SRC_FORT_CPU} ${SRC_H90TGT_CPU} ${SRC_C_CPU}
SRC_ALL_GPU=${SRC_FORT_GPU} ${SRC_H90TGT_GPU} ${SRC_C_GPU}

CONFIG_FILES="Makefile Makesettings MakesettingsGeneral"
CONFIG_FILES_POST=$(subst ",,${CONFIG_FILES})
CONFIG_FILES_CPU=$(addprefix $(SRC_DIR_CPU),$(CONFIG_FILES_POST))
CONFIG_FILES_GPU=$(addprefix $(SRC_DIR_GPU),$(CONFIG_FILES_POST))
#############################################################################

#############################################################################
# Determine executables                                                     #
#############################################################################
ifdef FRAMEWORK_MAKEFILE

FRAMEWORK_MAKEFILE_CPU=$(DIR_CPU)$(FRAMEWORK_MAKEFILE)
FRAMEWORK_MAKEFILE_GPU=$(DIR_GPU)$(FRAMEWORK_MAKEFILE)

FRAMEWORK_EXECUTABLE_PATHS_POST=$(subst ",,${FRAMEWORK_EXECUTABLE_PATHS})
FRAMEWORK_INSTALLED_EXECUTABLE_PATHS_POST=$(subst ",,${FRAMEWORK_INSTALLED_EXECUTABLE_PATHS})

FRAMEWORK_NON_HYBRID_EXECUTABLE_PATHS_POST=$(subst ",,${FRAMEWORK_NON_HYBRID_EXECUTABLE_PATHS})
FRAMEWORK_NON_HYBRID_INSTALLED_EXECUTABLE_PATHS_POST=$(subst ",,${FRAMEWORK_NON_HYBRID_INSTALLED_EXECUTABLE_PATHS})
NON_HYBRID_EXECUTABLES=$(addprefix $(DIR_CPU),$(FRAMEWORK_NON_HYBRID_EXECUTABLE_PATHS_POST))

FRAMEWORK_EXECUTABLES_CPU=$(addprefix $(DIR_CPU),$(FRAMEWORK_EXECUTABLE_PATHS_POST))
FRAMEWORK_EXECUTABLES_GPU=$(addprefix $(DIR_GPU),$(FRAMEWORK_EXECUTABLE_PATHS_POST))
EXECUTABLES_POST=${FRAMEWORK_EXECUTABLE_PATHS_POST}

else

EXECUTABLES_POST=$(subst ",,${EXECUTABLES})

endif

EXECUTABLES_CPU=$(addprefix $(DIR_CPU),$(notdir ${EXECUTABLES_POST}))
EXECUTABLES_GPU=$(addprefix $(DIR_GPU),$(notdir ${EXECUTABLES_POST}))
EXECUTABLES_CPU_OUT=$(EXECUTABLES_CPU)
EXECUTABLES_GPU_OUT=$(EXECUTABLES_GPU)
ifndef FRAMEWORK_MAKEFILE
EXECUTABLES_CPU_OUT=$(addsuffix .out,$(EXECUTABLES_CPU))
EXECUTABLES_GPU_OUT=$(addsuffix .out,$(EXECUTABLES_GPU))
endif

BUILD_TARGETS_CPU=${EXECUTABLES_CPU_OUT}
BUILD_TARGETS_GPU=${EXECUTABLES_GPU_OUT}
#############################################################################

#############################################################################
# Determine tests and installation                                          #
#############################################################################
ifdef FRAMEWORK_MAKEFILE

INSTALLED_EXECUTABLES_CPU_PRE=$(shell ${HF_DIR}/hf_bin/getFrameworkInstallPaths.sh "${EXECUTABLES_CPU_OUT}" "${FRAMEWORK_INSTALLED_EXECUTABLE_PATHS_POST}" cpu)
INSTALLED_EXECUTABLES_CPU=${INSTALLED_EXECUTABLES_CPU_PRE} $(shell ${HF_DIR}/hf_bin/getFrameworkInstallPaths.sh "${NON_HYBRID_EXECUTABLES}" "${FRAMEWORK_NON_HYBRID_INSTALLED_EXECUTABLE_PATHS_POST}")
INSTALLED_EXECUTABLES_GPU=$(shell ${HF_DIR}/hf_bin/getFrameworkInstallPaths.sh "${EXECUTABLES_GPU_OUT}" "${FRAMEWORK_INSTALLED_EXECUTABLE_PATHS_POST}" gpu)

else
ifdef EXECUTABLES_POST
ifdef TESTDIR

INSTALLED_EXECUTABLES_CPU=$(foreach executable,$(EXECUTABLES_POST),${TESTDIR}/${executable}/${executable}_cpu)
INSTALLED_EXECUTABLES_GPU=$(foreach executable,$(EXECUTABLES_POST),${TESTDIR}/${executable}/${executable}_gpu)

endif
endif
endif

DEFAULT_TEST_EXECUTABLES=0

ifndef TEST_EXECUTABLES
DEFAULT_TEST_EXECUTABLES=1
endif
ifeq (${TEST_EXECUTABLES}, "")
DEFAULT_TEST_EXECUTABLES=1
endif
ifeq (${DEFAULT_TEST_EXECUTABLES}, 1)

TEST_TARGET_CPU=${INSTALLED_EXECUTABLES_CPU}
TEST_TARGET_GPU=${INSTALLED_EXECUTABLES_GPU}

else

TEST_EXECUTABLES_POST=$(subst ",,${TEST_EXECUTABLES})
TEST_TARGET_CPU=${TEST_EXECUTABLES_POST}
TEST_TARGET_GPU=${TEST_EXECUTABLES_POST}

endif

TEST_OUTPUT_FILE_PATTERN_POST=$(subst ",,${TEST_OUTPUT_FILE_PATTERN})
ACCURACY_TEST_PARAMETERS_POST=$(subst ",,${ACCURACY_TEST_PARAMETERS})

ADDITIONAL_CLEANUPS_CPU= clean_installed_executables_cpu
ADDITIONAL_CLEANUPS_GPU= clean_installed_executables_gpu

INSTALL_TARGETS_CPU= ${INSTALLED_EXECUTABLES_CPU}
INSTALL_TARGETS_GPU= ${INSTALLED_EXECUTABLES_GPU}
#############################################################################

#############################################################################
# Determine dependency generator                                            #
#############################################################################
AUTO_DEPENDENCY_GENERATOR_OUTPUT_PATH_CPU=
AUTO_DEPENDENCY_GENERATOR_OUTPUT_PATH_GPU=
ifdef AUTO_DEPENDENCY_GENERATOR_OUTPUT_PATH
	AUTO_DEPENDENCY_GENERATOR_OUTPUT_PATH_CPU= ${DIR_CPU}${AUTO_DEPENDENCY_GENERATOR_OUTPUT_PATH}
	AUTO_DEPENDENCY_GENERATOR_OUTPUT_PATH_GPU= ${DIR_GPU}${AUTO_DEPENDENCY_GENERATOR_OUTPUT_PATH}
endif
#############################################################################

#############################################################################
# Determine arguments to preprocessor and to compiler                       #
#############################################################################
ifdef VERBOSE
H90_PREPROCESSOR_ARGS="--debug"
DEBUG_OUTPUT=&1
BUILD_ARGS="${BUILD_ARGS_PRE} VERBOSE=1"
else
H90_PREPROCESSOR_ARGS=
DEBUG_OUTPUT=/dev/null
endif
#############################################################################

define yellowecho
@[ -t 1 ] && tput setaf 3
@echo $1
@[ -t 1 ] && tput sgr0
endef

define debugecho
@[ -t 1 ] && tput bold
@echo $1 >${DEBUG_OUTPUT}
@[ -t 1 ] && tput sgr0
endef

define uniq
  $(eval seen :=)
  $(foreach _,$1,$(if $(filter $_,${seen}),,$(eval seen += $_)))
  ${seen}
endef

define trim
  $(eval trimmed :=)
  $(eval trimmed=$(echo -e "$1" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'))
  ${trimmed}
endef

SRC_FORT_COMMON_DIRS=$(dir $(SRC_FORT)) $(dir $(SRC_H90_ALL)) $(dir $(SRC_C))

vpath %.c $(SRC_FORT_COMMON_DIRS)
vpath %.cu $(SRC_FORT_COMMON_DIRS)
vpath %.f $(SRC_FORT_COMMON_DIRS)
vpath %.F $(SRC_FORT_COMMON_DIRS)
vpath %.f90 $(SRC_FORT_COMMON_DIRS)
vpath %.F90 $(SRC_FORT_COMMON_DIRS)
vpath %.h90 $(SRC_FORT_COMMON_DIRS)
vpath %.H90 $(SRC_FORT_COMMON_DIRS)
vpath %.inc $(SRC_FORT_COMMON_DIRS)

.PHONY: all clean clean_cpu clean_gpu clean_installed_executables_cpu clean_installed_executables_gpu install install_cpu install_gpu install_framework_executables_cpu install_framework_executables_gpu graphs build build_cpu build_gpu create_install_directories source source_cpu source_gpu tests tests_cpu tests_gpu framework_sources framework_sources_cpu framework_sources_gpu build_hybrid_cpu build_hybrid_gpu build_framework_cpu build_framework_gpu additional_configfiles_cpu additional_configfiles_gpu

.PRECIOUS: %.temp

.SUFFIXES: .f90 .F90 .h90 .H90 .f .F .P90 .c .cu .inc

all: build_cpu build_gpu

install: install_cpu install_gpu

install_cpu: ${INSTALL_TARGETS_CPU}

install_gpu: ${INSTALL_TARGETS_GPU}

source: source_cpu source_gpu

source_cpu: ${CG_DIR}CG_CPU.xml ${SRC_ALL_CPU}

source_gpu: ${CG_DIR}CG_GPU.xml ${SRC_ALL_GPU}

graphs: ${CG_DIR}CG_CPU.png ${CG_DIR}CG_GPU.png

clean: clean_cpu clean_gpu
	rm -f ${CG_DIR}rawCG.xml
	rm -rf ${SRC_DIR_HFPP}
	rm -rf ${BASEDIR_POST}

clean_cpu: ${ADDITIONAL_CLEANUPS_CPU}
	rm -rf ${DIR_CPU}
	rm -f ${CG_DIR}${CPU_CALLGRAPH_FILE}

clean_gpu: ${ADDITIONAL_CLEANUPS_GPU}
	rm -rf ${DIR_GPU}
	rm -f ${CG_DIR}${GPU_CALLGRAPH_FILE}

clean_installed_executables_cpu:
	rm -f ${INSTALLED_EXECUTABLES_CPU} $(addsuffix .dSYM, $(INSTALLED_EXECUTABLES_CPU))

clean_installed_executables_gpu:
	rm -f ${INSTALLED_EXECUTABLES_GPU}

build: build_cpu build_gpu

build_cpu: framework_sources_cpu ${BUILD_TARGETS_CPU} ${ADDITIONAL_BUILD_TARGETS_CPU}

build_gpu: framework_sources_gpu ${BUILD_TARGETS_GPU} ${ADDITIONAL_BUILD_TARGETS_GPU}

framework_sources_cpu: ${FRAMEWORK_CONFIGURE_OUTPUT}
	@( set -e && \
	  mkdir -p ${DIR_CPU} && \
	  framework_dir_list=( ${FRAMEWORK_DIRS} ) && \
	  for framework_dir in $$framework_dir_list ; do \
	    echo "..synching framework directory $$framework_dir with ${DIR_CPU}" && \
	    rsync -azP $$framework_dir ${DIR_CPU} >${DEBUG_OUTPUT} ; \
	  done )

framework_sources_gpu: ${FRAMEWORK_CONFIGURE_OUTPUT}
	@( set -e && \
	  mkdir -p ${DIR_GPU} && \
	  framework_dir_list=( ${FRAMEWORK_DIRS} ) && \
	  for framework_dir in $$framework_dir_list ; do \
	    echo "..synching framework directory $$framework_dir with ${DIR_GPU}" && \
	    rsync -azP $$framework_dir ${DIR_GPU} >${DEBUG_OUTPUT} ; \
	  done )

framework_sources: framework_sources_gpu framework_sources_cpu

${FRAMEWORK_CONFIGURE_OUTPUT}:
	@echo "..it looks like you haven't run ./configure yet - let's do that now"
	@./configure

ifdef FRAMEWORK_MAKEFILE
${FRAMEWORK_EXECUTABLES_CPU}: build_framework_cpu
${FRAMEWORK_EXECUTABLES_GPU}: build_framework_gpu
define install_rules_from_framework
.SECONDEXPANSION:
$(1)%: $(2)%
	@echo "...........creating $$@ from $$<"
	@cp -fp $$< $$@
endef
$(foreach framework_dir,$(shell ${HF_DIR}/hf_bin/trim.sh $(call uniq,$(dir ${FRAMEWORK_EXECUTABLES_CPU}))),$(eval $(call install_rules_from_framework,${DIR_CPU},$(framework_dir))))
$(foreach framework_dir,$(shell ${HF_DIR}/hf_bin/trim.sh $(call uniq,$(dir ${FRAMEWORK_EXECUTABLES_GPU}))),$(eval $(call install_rules_from_framework,${DIR_GPU},$(framework_dir))))
else
${EXECUTABLES_CPU_OUT}: build_hybrid_cpu
${EXECUTABLES_GPU_OUT}: build_hybrid_gpu
endif

build_hybrid_cpu: ${CG_DIR}CG_CPU.xml ${CONFIG_FILES_CPU} additional_configfiles_cpu ${SRC_ALL_CPU} framework_sources_cpu ${AUTO_DEPENDENCY_GENERATOR_OUTPUT_PATH_CPU}
	$(call yellowecho,"..entering ${SRC_DIR_CPU}")
	$(call debugecho,"..cpu executable dependant on ${SRC_ALL_CPU}")
	@cd ${SRC_DIR_CPU} && make ${BUILD_ARGS}

build_hybrid_gpu: ${CG_DIR}CG_GPU.xml ${CONFIG_FILES_GPU} additional_configfiles_gpu ${SRC_ALL_GPU} framework_sources_gpu ${AUTO_DEPENDENCY_GENERATOR_OUTPUT_PATH_GPU}
	$(call yellowecho,"..entering ${SRC_DIR_GPU}")
	$(call debugecho,"..cpu executable dependant on ${SRC_DIR_GPU}")
	@cd ${SRC_DIR_GPU} && make ${BUILD_ARGS} GPU_BUILD=1

build_framework_cpu: build_hybrid_cpu framework_sources_cpu
	$(call yellowecho,"..building framework with ${FRAMEWORK_MAKEFILE_CPU} and build arguments '${BUILD_ARGS}'")
	@cd $(dir ${FRAMEWORK_MAKEFILE_CPU}) && make ${BUILD_ARGS}

build_framework_gpu: build_hybrid_gpu framework_sources_gpu
	$(call yellowecho,"..building framework with ${FRAMEWORK_MAKEFILE_GPU} and build arguments '${BUILD_ARGS}'")
	@cd $(dir ${FRAMEWORK_MAKEFILE_GPU}) && make GPU=1 ${BUILD_ARGS} GPU_BUILD=1

create_install_directories:
	@echo "..creating install directories {$(dir ${INSTALLED_EXECUTABLES_CPU})}" >${DEBUG_OUTPUT}
	@mkdir -p $(dir ${INSTALLED_EXECUTABLES_CPU})
	@mkdir -p $(dir ${INSTALLED_EXECUTABLES_GPU})

tests: tests_cpu tests_gpu

ifdef DEBUG
tests_cpu: ${INSTALL_TARGETS_CPU}
	${HF_DIR}/hf_bin/runTests.sh "${TEST_TARGET_CPU}" debug cpu "${TEST_OUTPUT_FILE_PATTERN_POST}" "${SOURCE_THIS_BEFORE_TESTING}" "${SOURCE_THIS_AFTER_TESTING}" "${ACCURACY_TEST_PARAMETERS_POST}"
else
tests_cpu: ${INSTALL_TARGETS_CPU}
	${HF_DIR}/hf_bin/runTests.sh "${TEST_TARGET_CPU}" production cpu "${TEST_OUTPUT_FILE_PATTERN_POST}" "${SOURCE_THIS_BEFORE_TESTING}" "${SOURCE_THIS_AFTER_TESTING}" "${ACCURACY_TEST_PARAMETERS_POST}"
endif

tests_gpu: ${INSTALL_TARGETS_GPU}
	${HF_DIR}/hf_bin/runTests.sh "${TEST_TARGET_GPU}" production gpu "${TEST_OUTPUT_FILE_PATTERN_POST}" "${SOURCE_THIS_BEFORE_TESTING}" "${SOURCE_THIS_AFTER_TESTING}" "${ACCURACY_TEST_PARAMETERS_POST}"

${SRC_DIR_CPU}Makesettings: ${CONFIGDIR}MakesettingsCPU
	mkdir -p ${SRC_DIR_CPU} && cp $< $@

${SRC_DIR_GPU}Makesettings: ${CONFIGDIR}MakesettingsGPU
	mkdir -p ${SRC_DIR_GPU} && cp $< $@

${SRC_DIR_CPU}Makefile: ${CONFIGDIR}Makefile
	mkdir -p ${SRC_DIR_CPU} && cp $< $@

${SRC_DIR_GPU}Makefile: ${CONFIGDIR}Makefile
	mkdir -p ${SRC_DIR_GPU} && cp $< $@

${SRC_DIR_CPU}MakesettingsGeneral: ${CONFIGDIR}MakesettingsGeneral
	mkdir -p ${SRC_DIR_CPU} && cp $< $@

${SRC_DIR_GPU}MakesettingsGeneral: ${CONFIGDIR}MakesettingsGeneral
	mkdir -p ${SRC_DIR_CPU} && cp $< $@

additional_configfiles_cpu:
	mkdir -p ${SRC_DIR_CPU} && find ${CONFIGDIR} -maxdepth 1 -type d | awk '{if(NR>1)print}' | xargs -n1 -I {} cp -r {} ${SRC_DIR_CPU}

additional_configfiles_gpu:
	mkdir -p ${SRC_DIR_GPU} && find ${CONFIGDIR} -maxdepth 1 -type d | awk '{if(NR>1)print}' | xargs -n1 -I {} cp -r {} ${SRC_DIR_GPU}

ifdef AUTO_DEPENDENCY_GENERATOR_OUTPUT_PATH
${DIR_CPU}${AUTO_DEPENDENCY_GENERATOR_OUTPUT_PATH}: ${SRC_ALL_CPU} framework_sources_cpu
	@cd ${DIR_CPU} && ${AUTO_DEPENDENCY_GENERATOR_SCRIPT} $(addprefix ${SRC_DIR_COMMON}/, $(notdir $(SRC_ALL_CPU))) > ${AUTO_DEPENDENCY_GENERATOR_OUTPUT_PATH} 2>${DEBUG_OUTPUT}

${DIR_GPU}${AUTO_DEPENDENCY_GENERATOR_OUTPUT_PATH}: ${SRC_ALL_GPU} framework_sources_gpu
	@cd ${DIR_GPU} && ${AUTO_DEPENDENCY_GENERATOR_SCRIPT} $(addprefix ${SRC_DIR_COMMON}/, $(notdir $(SRC_ALL_GPU))) > ${AUTO_DEPENDENCY_GENERATOR_OUTPUT_PATH} 2>${DEBUG_OUTPUT}
endif

define install_rules
.SECONDEXPANSION:
$3%$1: $(2)$$(notdir %)$(4) create_install_directories
	@echo "...........creating $$@ from $$<"
	@cp -fp $$< $$@
endef
ifdef FRAMEWORK_MAKEFILE
$(foreach install_dir,$(shell ${HF_DIR}/hf_bin/trim.sh $(call uniq,$(dir ${INSTALLED_EXECUTABLES_CPU}))),$(eval $(call install_rules,_cpu,${DIR_CPU},$(install_dir))))
$(foreach install_dir,$(shell ${HF_DIR}/hf_bin/trim.sh $(call uniq,$(dir ${INSTALLED_EXECUTABLES_GPU}))),$(eval $(call install_rules,_gpu,${DIR_GPU},$(install_dir))))
else
$(foreach install_dir,$(shell ${HF_DIR}/hf_bin/trim.sh "$(call uniq,$(dir ${INSTALLED_EXECUTABLES_CPU}))"),$(eval $(call install_rules,_cpu,${DIR_CPU},$(install_dir),.out)))
$(foreach install_dir,$(shell ${HF_DIR}/hf_bin/trim.sh "$(call uniq,$(dir ${INSTALLED_EXECUTABLES_GPU}))"),$(eval $(call install_rules,_gpu,${DIR_GPU},$(install_dir),.out)))
endif

${CG_DIR}rawCG.xml: ${SRC_H90TGT_HFPP}
	@echo "...........hybrid files have been modified => building and testing hybrid callgraph"
	mkdir -p ${CG_DIR} && python ${PYTHON_ARGS_GENERAL} ${PYTHON_ARGS_RAW_CG} ${HF_PYTHON_DIR}annotatedCallGraphFromH90SourceDir.py -i ${SRC_DIR_HFPP} ${H90_PREPROCESSOR_ARGS} > $@

${DIR_CPU}implementationNamesByTemplate: ${CG_DIR}rawCG.xml
	mkdir -p ${DIR_CPU} && ${HF_DIR}/hf_bin/getImplementationNameByTemplate.sh cpu ${IMPLEMENTATION_MODE_SPECIFIER} ${CONFIGDIR}MakesettingsGeneral ${CG_DIR}rawCG.xml > ${DIR_CPU}implementationNamesByTemplate

${DIR_GPU}implementationNamesByTemplate: ${CG_DIR}rawCG.xml
	mkdir -p ${DIR_GPU} && ${HF_DIR}/hf_bin/getImplementationNameByTemplate.sh gpu ${IMPLEMENTATION_MODE_SPECIFIER} ${CONFIGDIR}MakesettingsGeneral ${CG_DIR}rawCG.xml > ${DIR_GPU}implementationNamesByTemplate

${CG_DIR}CG_CPU.xml: ${CG_DIR}rawCG.xml
	@echo "...........building CPU callgraph"
	@(set -e && \
		if [ -e $@ ]; then \
			mv $@ $@.ref ; \
		fi )
	mkdir -p ${CG_DIR} && python ${HF_PYTHON_DIR}loopAnalysisWithAnnotatedCallGraph.py -i $< ${H90_PREPROCESSOR_ARGS} -a CPU > $@
	@(set -e && \
		mkdir -p ${SRC_DIR_CPU} && \
		SOURCES_TO_REGENERATE=`python ${PYTHON_ARGS_GENERAL} ${PYTHON_ARGS_CPU_CG} ${HF_PYTHON_DIR}getSourcesToBeProcessed.py -i $@ -r $@.ref ${H90_PREPROCESSOR_ARGS}` && \
		PATHS_TO_REGENERATE="" && \
		for SOURCE in $${SOURCES_TO_REGENERATE[*]} ; do \
	   	PATHS_TO_REGENERATE="$${PATHS_TO_REGENERATE} ${SRC_DIR_CPU}$${SOURCE}.F90" ; \
	  done ; \
		echo "Need to regenerate $${PATHS_TO_REGENERATE}" && \
		rm -f $${PATHS_TO_REGENERATE} )

${CG_DIR}CG_GPU.xml: ${CG_DIR}rawCG.xml
	@echo "...........building GPU callgraph"
	@(set -e && \
		if [ -e $@ ]; then \
			mv $@ $@.ref ; \
		fi )
	mkdir -p ${CG_DIR} && python ${HF_PYTHON_DIR}loopAnalysisWithAnnotatedCallGraph.py -i $< ${H90_PREPROCESSOR_ARGS} -a GPU > $@
	@(set -e && \
		mkdir -p ${SRC_DIR_GPU} && \
		SOURCES_TO_REGENERATE=`python ${HF_PYTHON_DIR}getSourcesToBeProcessed.py -i $@ -r $@.ref ${H90_PREPROCESSOR_ARGS}` && \
		PATHS_TO_REGENERATE= && \
		for SOURCE in $${SOURCES_TO_REGENERATE[*]} ; do \
	   	PATHS_TO_REGENERATE="$${PATHS_TO_REGENERATE} ${SRC_DIR_GPU}$${SOURCE}.F90" ; \
	  done ; \
		echo "Need to regenerate $${PATHS_TO_REGENERATE}" && \
		rm -f $${PATHS_TO_REGENERATE} )

${CG_DIR}CG_CPU.png: ${CG_DIR}CG_CPU.xml
	@echo ...creating $@ from $< >${DEBUG_OUTPUT}
	python ${HF_PYTHON_DIR}graphVizGraphWithAnalyzedCallGraph.py -i $< ${H90_PREPROCESSOR_ARGS} -o $@

${CG_DIR}CG_GPU.png: ${CG_DIR}CG_GPU.xml
	@echo ...creating $@ from $< >${DEBUG_OUTPUT}
	python ${HF_PYTHON_DIR}graphVizGraphWithAnalyzedCallGraph.py -i $< ${H90_PREPROCESSOR_ARGS} -o $@

${SRC_DIR_CPU}%.f90: %.f90
	@echo ...copying file into $@ >${DEBUG_OUTPUT}
	@mkdir -p ${SRC_DIR_CPU} && cp -fp $< $@

${SRC_DIR_CPU}%.P90: %.F90
	@echo ...copying file into $@ >${DEBUG_OUTPUT}
	@mkdir -p ${SRC_DIR_CPU} && cp -fp $< $@

${SRC_DIR_CPU}%.F90: %.F90
	@echo ...copying file into $@ >${DEBUG_OUTPUT}
	@mkdir -p ${SRC_DIR_CPU} && cp -fp $< $@

${SRC_DIR_CPU}%.f: %.f
	@echo ...copying file into $@ >${DEBUG_OUTPUT}
	@mkdir -p ${SRC_DIR_CPU} && cp -fp $< $@

${SRC_DIR_CPU}%.F: %.F
	@echo ...copying file into $@ >${DEBUG_OUTPUT}
	@mkdir -p ${SRC_DIR_CPU} && cp -fp $< $@

${SRC_DIR_CPU}%.inc: %.inc
	@echo ...copying file into $@ >${DEBUG_OUTPUT}
	@mkdir -p ${SRC_DIR_CPU} && cp -fp $< $@

${SRC_DIR_CPU}%.c: %.c
	@echo ...copying file into $@ >${DEBUG_OUTPUT}
	@mkdir -p ${SRC_DIR_CPU} && cp -fp $< $@

${SRC_DIR_CPU}%.cu: %.cu
	@echo ...copying file into $@ >${DEBUG_OUTPUT}
	@mkdir -p ${SRC_DIR_CPU} && cp -fp $< $@

${SRC_DIR_GPU}%.f90: %.f90
	@echo ...copying file into $@ >${DEBUG_OUTPUT}
	@mkdir -p ${SRC_DIR_GPU} && cp -fp $< $@

${SRC_DIR_GPU}%.P90: %.F90
	@echo ...copying file into $@ >${DEBUG_OUTPUT}
	@mkdir -p ${SRC_DIR_GPU} && cp -fp $< $@

${SRC_DIR_GPU}%.F90: %.F90
	@echo ...copying file into $@ >${DEBUG_OUTPUT}
	@mkdir -p ${SRC_DIR_GPU} && cp -fp $< $@

${SRC_DIR_GPU}%.f: %.f
	@echo ...copying file into $@ >${DEBUG_OUTPUT}
	@mkdir -p ${SRC_DIR_GPU} && cp -fp $< $@

${SRC_DIR_GPU}%.F: %.F
	@echo ...copying file into $@ >${DEBUG_OUTPUT}
	@mkdir -p ${SRC_DIR_GPU} && cp -fp $< $@

${SRC_DIR_GPU}%.inc: %.inc
	@echo ...copying file into $@ >${DEBUG_OUTPUT}
	@mkdir -p ${SRC_DIR_GPU} && cp -fp $< $@

${SRC_DIR_GPU}%.c: %.c
	@echo ...copying file into $@ >${DEBUG_OUTPUT}
	@mkdir -p ${SRC_DIR_GPU} && cp -fp $< $@

${SRC_DIR_GPU}%.cu: %.cu
	@echo ...copying file into $@ >${DEBUG_OUTPUT}
	@mkdir -p ${SRC_DIR_GPU} && cp -fp $< $@

${SRC_DIR_HFPP}%.h90: %.h90
	@echo ...........preparing file for HF parsing: $<
	@mkdir -p ${SRC_DIR_HFPP} && python ${HF_PYTHON_DIR}process_includes.py $< | python ${HF_PYTHON_DIR}strip_fortran_line_continuations.py > $@

define generate_p90_rules
$(4): ${SRC_H90TGT_HFPP} $(2)implementationNamesByTemplate ${CG_DIR}$(3)
	@$$(call yellowecho,"...........converting all h90 files")
	python ${python_flags} ${HF_PYTHON_DIR}generateP90Codebase.py -i ${SRC_DIR_HFPP} -o $(1) -c ${CG_DIR}$(3) ${H90_PREPROCESSOR_ARGS} --implementation=$(2)implementationNamesByTemplate --optionFlags=${OPTION_FLAGS},${preprocessor_args} > $$@

$(1)%.P90: $(1)%.P90.temp
	@$$(call yellowecho,"...........copy $$(notdir $$<) if new or changed")
	@${HF_DIR}/hf_bin/copy_if_new_or_changed.sh $$< $$@
endef

$(eval $(call generate_p90_rules,${SRC_DIR_CPU},${DIR_CPU},${CPU_CALLGRAPH_FILE},${SRC_H90TGT_CPU_TEMP}))
$(eval $(call generate_p90_rules,${SRC_DIR_GPU},${DIR_GPU},${GPU_CALLGRAPH_FILE},${SRC_H90TGT_GPU_TEMP}))

${SRC_DIR_HFPP}%.h90: %.H90
	@echo ...........preprocessing and preparing file for HF parsing: $<
	mkdir -p ${SRC_DIR_HFPP} && cd $(dir $<) && set -o pipefail && < $(notdir $<) sed "s/\/\//¢/g" | gcc -E -w ${PFLAGS} - | tr "\`" '\n' | sed "s/¢/\/\//g" | python ${HF_PYTHON_DIR}process_includes.py ${SRC_DIR_HFPP} | python ${HF_PYTHON_DIR}strip_fortran_line_continuations.py > $@